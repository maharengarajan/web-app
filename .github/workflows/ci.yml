# name: CI Pipeline

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# jobs:
#   build-test-scan:
#     runs-on: ubuntu-latest

#     steps:
#       # Checkout source code
#       - name: Checkout code
#         uses: actions/checkout@v4

#       # Set up Python
#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: "3.9"

#       # Install dependencies
#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt
#           pip install pytest pytest-cov

#       # Run tests with coverage (fail if coverage < 80)
#       - name: Run pytest with coverage
#         run: |
#           pytest --cov=. --cov-report=xml:coverage.xml --cov-fail-under=80


#       # Upload coverage report
#       - name: Upload coverage report
#         uses: actions/upload-artifact@v4
#         with:
#           name: coverage-report
#           path: ./.coverage

#       # SonarQube Scan
#       - name: SonarQube Scan
#         uses: sonarsource/sonarqube-scan-action@v2
#         env:
#           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   
#         with:
#           args: >
#             -Dsonar.projectKey=maharengarajan_web-app
#             -Dsonar.organization=maharengarajan
#             -Dsonar.sources=src
#             -Dsonar.tests=tests
#             -Dsonar.python.coverage.reportPaths=coverage.xml
#             -X

#       # Set up Docker Buildx
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       # Log in to Docker Hub
#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_HUB_USERNAME }}
#           password: ${{ secrets.DOCKER_HUB_PASSWORD }}

#       # Build Docker image
#       - name: Build Docker image
#         run: |
#           docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/flask-calculator:latest .

#       # Scan image with Trivy (fail if HIGH/CRITICAL found)
#       - name: Scan Docker image with Trivy
#         uses: aquasecurity/trivy-action@0.20.0
#         with:
#           image-ref: ${{ secrets.DOCKER_HUB_USERNAME }}/flask-calculator:latest
#           format: 'table'
#           exit-code: '1'   # FAIL build if vulnerabilities found
#           severity: 'CRITICAL,HIGH'

#       # Push Docker image to Docker Hub
#       - name: Push Docker image
#         run: |
#           docker push ${{ secrets.DOCKER_HUB_USERNAME }}/flask-calculator:latest


# name: CI Pipeline

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# jobs:
#   build-test-scan:
#     runs-on: ubuntu-latest

#     steps:
#       # Checkout source code
#       - name: Checkout code
#         uses: actions/checkout@v4

#       # Set up Python
#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: "3.9"

#       # Cache pip dependencies
#       - name: Cache pip
#         uses: actions/cache@v3
#         with:
#           path: ~/.cache/pip
#           key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
#           restore-keys: |
#             ${{ runner.os }}-pip-

#       # Install dependencies
#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt
#           pip install pytest pytest-cov

#       # Run tests with coverage (fail if coverage < 80)
#       - name: Run pytest with coverage
#         run: |
#           pytest --cov=. --cov-report=xml:coverage.xml --cov-fail-under=80

#       # Upload coverage report
#       - name: Upload coverage report
#         uses: actions/upload-artifact@v4
#         with:
#           name: coverage-report
#           path: coverage.xml

#       # SonarQube Scan
#       - name: SonarQube Scan
#         uses: sonarsource/sonarqube-scan-action@v2
#         env:
#           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   
#         with:
#           args: >
#             -Dsonar.projectKey=maharengarajan_web-app
#             -Dsonar.organization=maharengarajan
#             -Dsonar.sources=src
#             -Dsonar.tests=tests
#             -Dsonar.python.coverage.reportPaths=coverage.xml
#             -X

#       # Set up Docker Buildx
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       # Log in to Docker Hub
#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_HUB_USERNAME }}
#           password: ${{ secrets.DOCKER_HUB_PASSWORD }}

#       # Build Docker image
#       - name: Build Docker image
#         run: |
#           docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/flask-calculator:latest .

#       # Scan image with Trivy (fail if HIGH/CRITICAL found)
#       - name: Scan Docker image with Trivy
#         uses: aquasecurity/trivy-action@0.20.0
#         with:
#           image-ref: ${{ secrets.DOCKER_HUB_USERNAME }}/flask-calculator:latest
#           format: 'table'
#           exit-code: '1'   # FAIL build if vulnerabilities found
#           severity: 'CRITICAL,HIGH'

#       # Push Docker image to Docker Hub
#       - name: Push Docker image
#         run: |
#           docker push ${{ secrets.DOCKER_HUB_USERNAME }}/flask-calculator:latest

name: CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # -------------------------------
  # 1️⃣ Test and Coverage Job
  # -------------------------------
  test-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      # Cache pip
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run pytest with coverage
        run: |
          pytest --cov=src --cov-report=xml:coverage.xml --cov-fail-under=80

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  # -------------------------------
  # 2️⃣ SonarCloud Scan Job
  # -------------------------------
  sonar-scan:
    runs-on: ubuntu-latest
    needs: test-coverage  # optional if you want coverage first
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: .

      - name: SonarCloud Scan
        uses: sonarsource/sonarqube-scan-action@v2
        env:
          SONAR_HOST_URL: https://sonarcloud.io
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=maharengarajan_web-app
            -Dsonar.organization=maharengarajan
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -X

  # -------------------------------
  # 3️⃣ Docker Build & Security Scan Job
  # -------------------------------
  docker-build-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/flask-calculator:latest .

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ secrets.DOCKER_HUB_USERNAME }}/flask-calculator:latest
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/flask-calculator:latest